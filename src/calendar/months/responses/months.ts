import { CalendarBusyDay } from 'src/calendar/models/busy-day.model';
import { backInlineBtn } from '../../../general';
import {
  formatKeyboard,
  getEmptyBtns,
  getNowDate,
  getZero,
} from 'src/libs/common';
import { months, weekDays } from '../../configs';

export const calendarMonthsMessage =
  () => `<b>–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å</b> –∏ –≤–∞–º –Ω–µ –ø—Ä–∏–¥–µ—Ç—Å—è –æ–±—Å—É–∂–¥–∞—Ç—å –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏, —Ç–∞–∫ –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫ –≤—ã–±–µ—Ä–µ—Ç –µ–≥–æ —Å–∞–º, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –≤–∞—à–µ–º –≥—Ä–∞—Ñ–∏–∫–µ.

–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ <u>–∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É</u>, –¥–ª—è —ç—Ç–æ–≥–æ <u>–≤—ã–±–µ—Ä–∏—Ç–µ</u> –¥–µ–Ω—å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏—Ç–µ <u>–ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π</u>.

<i>–î–Ω–∏, –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–∫–æ–º ¬´‚ùå¬ª —è–≤–ª—è—é—Ç—Å—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º–∏.</i>`;

export const calendarMonthsMarkup = (
  userId: string,
  busyDays: CalendarBusyDay[],
  incMonth = 0,
) => {
  const oldestDate = getNowDate();
  oldestDate.setUTCMonth(oldestDate.getUTCMonth() + 1 + incMonth);
  oldestDate.setUTCDate(0);
  const maxDate = oldestDate.getUTCDate();
  const maxDateDay = oldestDate.getUTCDay();

  const newestDate = getNowDate();
  newestDate.setUTCMonth(newestDate.getUTCMonth() + incMonth);
  newestDate.setUTCDate(1);
  const minDateDay = newestDate.getUTCDay();

  const days = [];

  if (minDateDay !== 1) {
    days.push(...getEmptyBtns(minDateDay === 0 ? 6 : minDateDay - 1));
  }

  for (let i = 1; i < maxDate + 1; i++) {
    const isBusy = busyDays.map((i) => i.date).includes(i);

    let dayText = String(i);

    const today = getNowDate();

    if (isBusy) {
      dayText = '‚ùå';
    }

    if (
      oldestDate.getUTCFullYear() === today.getUTCFullYear() &&
      oldestDate.getUTCMonth() === today.getUTCMonth() &&
      today.getUTCDate() === i
    ) {
      dayText += ' ‚óè';
    }

    days.push({
      text: dayText,
      callback_data: `${getZero(i)}.${getZero(
        oldestDate.getUTCMonth() + 1,
      )}.${oldestDate.getUTCFullYear()}::calendar_date`,
    });
  }

  const daysDiff = maxDate % 7;
  const isMonthClear = daysDiff === 0 && minDateDay === 1;

  if (!isMonthClear && maxDateDay !== 0) {
    days.push(...getEmptyBtns(7 - maxDateDay));
  }

  const monthBtn = months[oldestDate.getUTCMonth()];

  return {
    inline_keyboard: [
      [
        {
          ...monthBtn,
          text: `${monthBtn.text} ${oldestDate.getUTCFullYear()}`,
        },
      ],
      weekDays,
      ...formatKeyboard(days, 7),
      [
        { text: '‚óÄÔ∏è', callback_data: `${incMonth}::prev_calendar_month` },
        { text: '‚ñ∂Ô∏è', callback_data: `${incMonth}::next_calendar_month` },
      ],
      [
        {
          text: 'üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π',
          url: encodeURI(
            `https://t.me/share/url?url=${
              process.env.BOT_LINK
            }?start=cal-m-${getZero(
              oldestDate.getUTCMonth() + 1,
            )}_${oldestDate.getUTCFullYear()}-${userId}&text=–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–æ–µ–π –∑–∞–Ω—è—Ç–æ—Å—Ç–∏`,
          ),
        },
      ],
      backInlineBtn,
    ],
  };
};
